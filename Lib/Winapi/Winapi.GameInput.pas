unit Winapi.GameInput;
{ This unit is automatically generated by Chet:
  https://github.com/neslib/Chet }

{$MINENUMSIZE 4}
{$ALIGN 4}

interface

uses
  Winapi.Windows;

const
  LIB_GAMEINPUT = 'GameInput.dll';
  _PU = '';

const
  GAMEINPUT_CURRENT_CALLBACK_TOKEN_VALUE = $FFFFFFFFFFFFFFFF;
  GAMEINPUT_INVALID_CALLBACK_TOKEN_VALUE = $0000000000000000;

  FACILITY_GAMEINPUT = 906;

  GAMEINPUT_E_DEVICE_DISCONNECTED = $838A0001;
  GAMEINPUT_E_DEVICE_NOT_FOUND = $838A0002;
  GAMEINPUT_E_READING_NOT_FOUND = $838A0003;
  GAMEINPUT_E_REFERENCE_READING_TOO_OLD = $838A0004;
  GAMEINPUT_E_TIMESTAMP_OUT_OF_RANGE = $838A0005;
  GAMEINPUT_E_INSUFFICIENT_FORCE_FEEDBACK_RESOURCES = $838A0006;

  APP_LOCAL_DEVICE_ID_SIZE = 32;

type
  // added
  PIID = PGUID;
  PIUnknown = ^IUnknown;
  HANDLE = THandle;

  // Forward declarations
  PInt64 = ^Int64;
  PNativeUInt = ^NativeUInt;
  PGameInputKeyState = ^GameInputKeyState;
  PGameInputMouseState = ^GameInputMouseState;
  PGameInputTouchState = ^GameInputTouchState;
  PGameInputMotionState = ^GameInputMotionState;
  PGameInputArcadeStickState = ^GameInputArcadeStickState;
  PGameInputFlightStickState = ^GameInputFlightStickState;
  PGameInputGamepadState = ^GameInputGamepadState;
  PGameInputRacingWheelState = ^GameInputRacingWheelState;
  PGameInputUiNavigationState = ^GameInputUiNavigationState;
  PGameInputBatteryState = ^GameInputBatteryState;
  PGameInputString = ^GameInputString;
  PGameInputUsage = ^GameInputUsage;
  PGameInputVersion = ^GameInputVersion;
  PGameInputRawDeviceItemCollectionInfo = ^GameInputRawDeviceItemCollectionInfo;
  PGameInputRawDeviceReportItemInfo = ^GameInputRawDeviceReportItemInfo;
  PGameInputRawDeviceReportInfo = ^GameInputRawDeviceReportInfo;
  PGameInputControllerAxisInfo = ^GameInputControllerAxisInfo;
  PGameInputControllerButtonInfo = ^GameInputControllerButtonInfo;
  PGameInputControllerSwitchInfo = ^GameInputControllerSwitchInfo;
  PGameInputKeyboardInfo = ^GameInputKeyboardInfo;
  PGameInputMouseInfo = ^GameInputMouseInfo;
  PGameInputTouchSensorInfo = ^GameInputTouchSensorInfo;
  PGameInputMotionInfo = ^GameInputMotionInfo;
  PGameInputArcadeStickInfo = ^GameInputArcadeStickInfo;
  PGameInputFlightStickInfo = ^GameInputFlightStickInfo;
  PGameInputGamepadInfo = ^GameInputGamepadInfo;
  PGameInputRacingWheelInfo = ^GameInputRacingWheelInfo;
  PGameInputUiNavigationInfo = ^GameInputUiNavigationInfo;
  PGameInputForceFeedbackMotorInfo = ^GameInputForceFeedbackMotorInfo;
  PGameInputHapticWaveformInfo = ^GameInputHapticWaveformInfo;
  PGameInputHapticFeedbackMotorInfo = ^GameInputHapticFeedbackMotorInfo;
  PGameInputDeviceInfo = ^GameInputDeviceInfo;
  PGameInputForceFeedbackEnvelope = ^GameInputForceFeedbackEnvelope;
  PGameInputForceFeedbackMagnitude = ^GameInputForceFeedbackMagnitude;
  PGameInputForceFeedbackConditionParams = ^GameInputForceFeedbackConditionParams;
  PGameInputForceFeedbackConstantParams = ^GameInputForceFeedbackConstantParams;
  PGameInputForceFeedbackPeriodicParams = ^GameInputForceFeedbackPeriodicParams;
  PGameInputForceFeedbackRampParams = ^GameInputForceFeedbackRampParams;
  PGameInputForceFeedbackParams = ^GameInputForceFeedbackParams;
  PGameInputHapticFeedbackParams = ^GameInputHapticFeedbackParams;
  PGameInputRumbleParams = ^GameInputRumbleParams;
  PIGameInput = ^IGameInput;
  PPIGameInput = ^PIGameInput;
  PIGameInputVtbl = ^IGameInputVtbl;
  PIGameInputReading = ^IGameInputReading;
  PPIGameInputReading = ^PIGameInputReading;
  PIGameInputReadingVtbl = ^IGameInputReadingVtbl;
  PIGameInputDevice = ^IGameInputDevice;
  PPIGameInputDevice = ^PIGameInputDevice;
  PIGameInputDeviceVtbl = ^IGameInputDeviceVtbl;
  PIGameInputDispatcher = ^IGameInputDispatcher;
  PPIGameInputDispatcher = ^PIGameInputDispatcher;
  PIGameInputDispatcherVtbl = ^IGameInputDispatcherVtbl;
  PIGameInputForceFeedbackEffect = ^IGameInputForceFeedbackEffect;
  PPIGameInputForceFeedbackEffect = ^PIGameInputForceFeedbackEffect;
  PIGameInputForceFeedbackEffectVtbl = ^IGameInputForceFeedbackEffectVtbl;
  PIGameInputRawDeviceReport = ^IGameInputRawDeviceReport;
  PPIGameInputRawDeviceReport = ^PIGameInputRawDeviceReport;
  PIGameInputRawDeviceReportVtbl = ^IGameInputRawDeviceReportVtbl;

  PAPP_LOCAL_DEVICE_ID = ^APP_LOCAL_DEVICE_ID;
  APP_LOCAL_DEVICE_ID = record
    value: array [0.. APP_LOCAL_DEVICE_ID_SIZE - 1] of Byte;
  end;

  GameInputKind = (
    GameInputKindUnknown = 0,
    GameInputKindRawDeviceReport = 1,
    GameInputKindControllerAxis = 2,
    GameInputKindControllerButton = 4,
    GameInputKindControllerSwitch = 8,
    GameInputKindController = 14,
    GameInputKindKeyboard = 16,
    GameInputKindMouse = 32,
    GameInputKindTouch = 256,
    GameInputKindMotion = 4096,
    GameInputKindArcadeStick = 65536,
    GameInputKindFlightStick = 131072,
    GameInputKindGamepad = 262144,
    GameInputKindRacingWheel = 524288,
    GameInputKindUiNavigation = 16777216);
  PGameInputKind = ^GameInputKind;

  GameInputEnumerationKind = (
    GameInputNoEnumeration = 0,
    GameInputAsyncEnumeration = 1,
    GameInputBlockingEnumeration = 2);
  PGameInputEnumerationKind = ^GameInputEnumerationKind;

  GameInputFocusPolicy = (
    GameInputDefaultFocusPolicy = 0,
    GameInputDisableBackgroundInput = 1,
    GameInputExclusiveForegroundInput = 2);
  PGameInputFocusPolicy = ^GameInputFocusPolicy;

  GameInputSwitchKind = (
    GameInputUnknownSwitchKind = -1,
    GameInput2WaySwitch = 0,
    GameInput4WaySwitch = 1,
    GameInput8WaySwitch = 2);
  PGameInputSwitchKind = ^GameInputSwitchKind;

  GameInputSwitchPosition = (
    GameInputSwitchCenter = 0,
    GameInputSwitchUp = 1,
    GameInputSwitchUpRight = 2,
    GameInputSwitchRight = 3,
    GameInputSwitchDownRight = 4,
    GameInputSwitchDown = 5,
    GameInputSwitchDownLeft = 6,
    GameInputSwitchLeft = 7,
    GameInputSwitchUpLeft = 8);
  PGameInputSwitchPosition = ^GameInputSwitchPosition;

  GameInputKeyboardKind = (
    GameInputUnknownKeyboard = -1,
    GameInputAnsiKeyboard = 0,
    GameInputIsoKeyboard = 1,
    GameInputKsKeyboard = 2,
    GameInputAbntKeyboard = 3,
    GameInputJisKeyboard = 4);
  PGameInputKeyboardKind = ^GameInputKeyboardKind;

  GameInputMouseButtons = (
    GameInputMouseNone = 0,
    GameInputMouseLeftButton = 1,
    GameInputMouseRightButton = 2,
    GameInputMouseMiddleButton = 4,
    GameInputMouseButton4 = 8,
    GameInputMouseButton5 = 16,
    GameInputMouseWheelTiltLeft = 32,
    GameInputMouseWheelTiltRight = 64);
  PGameInputMouseButtons = ^GameInputMouseButtons;

  GameInputTouchShape = (
    GameInputTouchShapeUnknown = -1,
    GameInputTouchShapePoint = 0,
    GameInputTouchShape1DLinear = 1,
    GameInputTouchShape1DRadial = 2,
    GameInputTouchShape1DIrregular = 3,
    GameInputTouchShape2DRectangular = 4,
    GameInputTouchShape2DElliptical = 5,
    GameInputTouchShape2DIrregular = 6);
  PGameInputTouchShape = ^GameInputTouchShape;

  GameInputMotionAccuracy = (
    GameInputMotionAccuracyUnknown = -1,
    GameInputMotionUnavailable = 0,
    GameInputMotionUnreliable = 1,
    GameInputMotionApproximate = 2,
    GameInputMotionAccurate = 3);
  PGameInputMotionAccuracy = ^GameInputMotionAccuracy;

  GameInputArcadeStickButtons = (
    GameInputArcadeStickNone = 0,
    GameInputArcadeStickMenu = 1,
    GameInputArcadeStickView = 2,
    GameInputArcadeStickUp = 4,
    GameInputArcadeStickDown = 8,
    GameInputArcadeStickLeft = 16,
    GameInputArcadeStickRight = 32,
    GameInputArcadeStickAction1 = 64,
    GameInputArcadeStickAction2 = 128,
    GameInputArcadeStickAction3 = 256,
    GameInputArcadeStickAction4 = 512,
    GameInputArcadeStickAction5 = 1024,
    GameInputArcadeStickAction6 = 2048,
    GameInputArcadeStickSpecial1 = 4096,
    GameInputArcadeStickSpecial2 = 8192);
  PGameInputArcadeStickButtons = ^GameInputArcadeStickButtons;

  GameInputFlightStickButtons = (
    GameInputFlightStickNone = 0,
    GameInputFlightStickMenu = 1,
    GameInputFlightStickView = 2,
    GameInputFlightStickFirePrimary = 4,
    GameInputFlightStickFireSecondary = 8);
  PGameInputFlightStickButtons = ^GameInputFlightStickButtons;

  GameInputGamepadButtons = (
    GameInputGamepadNone = 0,
    GameInputGamepadMenu = 1,
    GameInputGamepadView = 2,
    GameInputGamepadA = 4,
    GameInputGamepadB = 8,
    GameInputGamepadX = 16,
    GameInputGamepadY = 32,
    GameInputGamepadDPadUp = 64,
    GameInputGamepadDPadDown = 128,
    GameInputGamepadDPadLeft = 256,
    GameInputGamepadDPadRight = 512,
    GameInputGamepadLeftShoulder = 1024,
    GameInputGamepadRightShoulder = 2048,
    GameInputGamepadLeftThumbstick = 4096,
    GameInputGamepadRightThumbstick = 8192);
  PGameInputGamepadButtons = ^GameInputGamepadButtons;

  GameInputRacingWheelButtons = (
    GameInputRacingWheelNone = 0,
    GameInputRacingWheelMenu = 1,
    GameInputRacingWheelView = 2,
    GameInputRacingWheelPreviousGear = 4,
    GameInputRacingWheelNextGear = 8,
    GameInputRacingWheelDpadUp = 16,
    GameInputRacingWheelDpadDown = 32,
    GameInputRacingWheelDpadLeft = 64,
    GameInputRacingWheelDpadRight = 128);
  PGameInputRacingWheelButtons = ^GameInputRacingWheelButtons;

  GameInputUiNavigationButtons = (
    GameInputUiNavigationNone = 0,
    GameInputUiNavigationMenu = 1,
    GameInputUiNavigationView = 2,
    GameInputUiNavigationAccept = 4,
    GameInputUiNavigationCancel = 8,
    GameInputUiNavigationUp = 16,
    GameInputUiNavigationDown = 32,
    GameInputUiNavigationLeft = 64,
    GameInputUiNavigationRight = 128,
    GameInputUiNavigationContext1 = 256,
    GameInputUiNavigationContext2 = 512,
    GameInputUiNavigationContext3 = 1024,
    GameInputUiNavigationContext4 = 2048,
    GameInputUiNavigationPageUp = 4096,
    GameInputUiNavigationPageDown = 8192,
    GameInputUiNavigationPageLeft = 16384,
    GameInputUiNavigationPageRight = 32768,
    GameInputUiNavigationScrollUp = 65536,
    GameInputUiNavigationScrollDown = 131072,
    GameInputUiNavigationScrollLeft = 262144,
    GameInputUiNavigationScrollRight = 524288);
  PGameInputUiNavigationButtons = ^GameInputUiNavigationButtons;

  GameInputDeviceStatus = (
    GameInputDeviceNoStatus = 0,
    GameInputDeviceConnected = 1,
    GameInputDeviceInputEnabled = 2,
    GameInputDeviceOutputEnabled = 4,
    GameInputDeviceRawIoEnabled = 8,
    GameInputDeviceAudioCapture = 16,
    GameInputDeviceAudioRender = 32,
    GameInputDeviceSynchronized = 64,
    GameInputDeviceWireless = 128,
    GameInputDeviceUserIdle = 1048576,
    GameInputDeviceAnyStatus = 16777215);
  PGameInputDeviceStatus = ^GameInputDeviceStatus;

  GameInputBatteryStatus = (
    GameInputBatteryUnknown = -1,
    GameInputBatteryNotPresent = 0,
    GameInputBatteryDischarging = 1,
    GameInputBatteryIdle = 2,
    GameInputBatteryCharging = 3);
  PGameInputBatteryStatus = ^GameInputBatteryStatus;

  GameInputDeviceFamily = (
    GameInputFamilyVirtual = -1,
    GameInputFamilyAggregate = 0,
    GameInputFamilyXboxOne = 1,
    GameInputFamilyXbox360 = 2,
    GameInputFamilyHid = 3,
    GameInputFamilyI8042 = 4);
  PGameInputDeviceFamily = ^GameInputDeviceFamily;

  GameInputDeviceCapabilities = (
    GameInputDeviceCapabilityNone = 0,
    GameInputDeviceCapabilityAudio = 1,
    GameInputDeviceCapabilityPluginModule = 2,
    GameInputDeviceCapabilityPowerOff = 4,
    GameInputDeviceCapabilitySynchronization = 8,
    GameInputDeviceCapabilityWireless = 16);
  PGameInputDeviceCapabilities = ^GameInputDeviceCapabilities;

  GameInputRawDeviceReportKind = (
    GameInputRawInputReport = 0,
    GameInputRawOutputReport = 1,
    GameInputRawFeatureReport = 2);
  PGameInputRawDeviceReportKind = ^GameInputRawDeviceReportKind;

  GameInputRawDeviceReportItemFlags = (
    GameInputDefaultItem = 0,
    GameInputConstantItem = 1,
    GameInputArrayItem = 2,
    GameInputRelativeItem = 4,
    GameInputWraparoundItem = 8,
    GameInputNonlinearItem = 16,
    GameInputStableItem = 32,
    GameInputNullableItem = 64,
    GameInputVolatileItem = 128,
    GameInputBufferedItem = 256);
  PGameInputRawDeviceReportItemFlags = ^GameInputRawDeviceReportItemFlags;

  GameInputRawDeviceItemCollectionKind = (
    GameInputUnknownItemCollection = -1,
    GameInputPhysicalItemCollection = 0,
    GameInputApplicationItemCollection = 1,
    GameInputLogicalItemCollection = 2,
    GameInputReportItemCollection = 3,
    GameInputNamedArrayItemCollection = 4,
    GameInputUsageSwitchItemCollection = 5,
    GameInputUsageModifierItemCollection = 6);
  PGameInputRawDeviceItemCollectionKind = ^GameInputRawDeviceItemCollectionKind;

  GameInputRawDevicePhysicalUnitKind = (
    GameInputPhysicalUnitUnknown = -1,
    GameInputPhysicalUnitNone = 0,
    GameInputPhysicalUnitTime = 1,
    GameInputPhysicalUnitFrequency = 2,
    GameInputPhysicalUnitLength = 3,
    GameInputPhysicalUnitVelocity = 4,
    GameInputPhysicalUnitAcceleration = 5,
    GameInputPhysicalUnitMass = 6,
    GameInputPhysicalUnitMomentum = 7,
    GameInputPhysicalUnitForce = 8,
    GameInputPhysicalUnitPressure = 9,
    GameInputPhysicalUnitAngle = 10,
    GameInputPhysicalUnitAngularVelocity = 11,
    GameInputPhysicalUnitAngularAcceleration = 12,
    GameInputPhysicalUnitAngularMass = 13,
    GameInputPhysicalUnitAngularMomentum = 14,
    GameInputPhysicalUnitAngularTorque = 15,
    GameInputPhysicalUnitElectricCurrent = 16,
    GameInputPhysicalUnitElectricCharge = 17,
    GameInputPhysicalUnitElectricPotential = 18,
    GameInputPhysicalUnitEnergy = 19,
    GameInputPhysicalUnitPower = 20,
    GameInputPhysicalUnitTemperature = 21,
    GameInputPhysicalUnitLuminousIntensity = 22,
    GameInputPhysicalUnitLuminousFlux = 23,
    GameInputPhysicalUnitIlluminance = 24);
  PGameInputRawDevicePhysicalUnitKind = ^GameInputRawDevicePhysicalUnitKind;

  GameInputLabel = (
    GameInputLabelUnknown = -1,
    GameInputLabelNone = 0,
    GameInputLabelXboxGuide = 1,
    GameInputLabelXboxBack = 2,
    GameInputLabelXboxStart = 3,
    GameInputLabelXboxMenu = 4,
    GameInputLabelXboxView = 5,
    GameInputLabelXboxA = 7,
    GameInputLabelXboxB = 8,
    GameInputLabelXboxX = 9,
    GameInputLabelXboxY = 10,
    GameInputLabelXboxDPadUp = 11,
    GameInputLabelXboxDPadDown = 12,
    GameInputLabelXboxDPadLeft = 13,
    GameInputLabelXboxDPadRight = 14,
    GameInputLabelXboxLeftShoulder = 15,
    GameInputLabelXboxLeftTrigger = 16,
    GameInputLabelXboxLeftStickButton = 17,
    GameInputLabelXboxRightShoulder = 18,
    GameInputLabelXboxRightTrigger = 19,
    GameInputLabelXboxRightStickButton = 20,
    GameInputLabelXboxPaddle1 = 21,
    GameInputLabelXboxPaddle2 = 22,
    GameInputLabelXboxPaddle3 = 23,
    GameInputLabelXboxPaddle4 = 24,
    GameInputLabelLetterA = 25,
    GameInputLabelLetterB = 26,
    GameInputLabelLetterC = 27,
    GameInputLabelLetterD = 28,
    GameInputLabelLetterE = 29,
    GameInputLabelLetterF = 30,
    GameInputLabelLetterG = 31,
    GameInputLabelLetterH = 32,
    GameInputLabelLetterI = 33,
    GameInputLabelLetterJ = 34,
    GameInputLabelLetterK = 35,
    GameInputLabelLetterL = 36,
    GameInputLabelLetterM = 37,
    GameInputLabelLetterN = 38,
    GameInputLabelLetterO = 39,
    GameInputLabelLetterP = 40,
    GameInputLabelLetterQ = 41,
    GameInputLabelLetterR = 42,
    GameInputLabelLetterS = 43,
    GameInputLabelLetterT = 44,
    GameInputLabelLetterU = 45,
    GameInputLabelLetterV = 46,
    GameInputLabelLetterW = 47,
    GameInputLabelLetterX = 48,
    GameInputLabelLetterY = 49,
    GameInputLabelLetterZ = 50,
    GameInputLabelNumber0 = 51,
    GameInputLabelNumber1 = 52,
    GameInputLabelNumber2 = 53,
    GameInputLabelNumber3 = 54,
    GameInputLabelNumber4 = 55,
    GameInputLabelNumber5 = 56,
    GameInputLabelNumber6 = 57,
    GameInputLabelNumber7 = 58,
    GameInputLabelNumber8 = 59,
    GameInputLabelNumber9 = 60,
    GameInputLabelArrowUp = 61,
    GameInputLabelArrowUpRight = 62,
    GameInputLabelArrowRight = 63,
    GameInputLabelArrowDownRight = 64,
    GameInputLabelArrowDown = 65,
    GameInputLabelArrowDownLLeft = 66,
    GameInputLabelArrowLeft = 67,
    GameInputLabelArrowUpLeft = 68,
    GameInputLabelArrowUpDown = 69,
    GameInputLabelArrowLeftRight = 70,
    GameInputLabelArrowUpDownLeftRight = 71,
    GameInputLabelArrowClockwise = 72,
    GameInputLabelArrowCounterClockwise = 73,
    GameInputLabelArrowReturn = 74,
    GameInputLabelIconBranding = 75,
    GameInputLabelIconHome = 76,
    GameInputLabelIconMenu = 77,
    GameInputLabelIconCross = 78,
    GameInputLabelIconCircle = 79,
    GameInputLabelIconSquare = 80,
    GameInputLabelIconTriangle = 81,
    GameInputLabelIconStar = 82,
    GameInputLabelIconDPadUp = 83,
    GameInputLabelIconDPadDown = 84,
    GameInputLabelIconDPadLeft = 85,
    GameInputLabelIconDPadRight = 86,
    GameInputLabelIconDialClockwise = 87,
    GameInputLabelIconDialCounterClockwise = 88,
    GameInputLabelIconSliderLeftRight = 89,
    GameInputLabelIconSliderUpDown = 90,
    GameInputLabelIconWheelUpDown = 91,
    GameInputLabelIconPlus = 92,
    GameInputLabelIconMinus = 93,
    GameInputLabelIconSuspension = 94,
    GameInputLabelHome = 95,
    GameInputLabelGuide = 96,
    GameInputLabelMode = 97,
    GameInputLabelSelect = 98,
    GameInputLabelMenu = 99,
    GameInputLabelView = 100,
    GameInputLabelBack = 101,
    GameInputLabelStart = 102,
    GameInputLabelOptions = 103,
    GameInputLabelShare = 104,
    GameInputLabelUp = 105,
    GameInputLabelDown = 106,
    GameInputLabelLeft = 107,
    GameInputLabelRight = 108,
    GameInputLabelLB = 109,
    GameInputLabelLT = 110,
    GameInputLabelLSB = 111,
    GameInputLabelL1 = 112,
    GameInputLabelL2 = 113,
    GameInputLabelL3 = 114,
    GameInputLabelRB = 115,
    GameInputLabelRT = 116,
    GameInputLabelRSB = 117,
    GameInputLabelR1 = 118,
    GameInputLabelR2 = 119,
    GameInputLabelR3 = 120,
    GameInputLabelP1 = 121,
    GameInputLabelP2 = 122,
    GameInputLabelP3 = 123,
    GameInputLabelP4 = 124);
  PGameInputLabel = ^GameInputLabel;

  GameInputLocation = (
    GameInputLocationUnknown = -1,
    GameInputLocationChassis = 0,
    GameInputLocationDisplay = 1,
    GameInputLocationAxis = 2,
    GameInputLocationButton = 3,
    GameInputLocationSwitch = 4,
    GameInputLocationKey = 5,
    GameInputLocationTouchPad = 6);
  PGameInputLocation = ^GameInputLocation;

  GameInputFeedbackAxes = (
    GameInputFeedbackAxisNone = 0,
    GameInputFeedbackAxisLinearX = 1,
    GameInputFeedbackAxisLinearY = 2,
    GameInputFeedbackAxisLinearZ = 4,
    GameInputFeedbackAxisAngularX = 8,
    GameInputFeedbackAxisAngularY = 16,
    GameInputFeedbackAxisAngularZ = 32,
    GameInputFeedbackAxisNormal = 64);
  PGameInputFeedbackAxes = ^GameInputFeedbackAxes;

  GameInputFeedbackEffectState = (
    GameInputFeedbackStopped = 0,
    GameInputFeedbackRunning = 1,
    GameInputFeedbackPaused = 2);
  PGameInputFeedbackEffectState = ^GameInputFeedbackEffectState;

  GameInputForceFeedbackEffectKind = (
    GameInputForceFeedbackConstant = 0,
    GameInputForceFeedbackRamp = 1,
    GameInputForceFeedbackSineWave = 2,
    GameInputForceFeedbackSquareWave = 3,
    GameInputForceFeedbackTriangleWave = 4,
    GameInputForceFeedbackSawtoothUpWave = 5,
    GameInputForceFeedbackSawtoothDownWave = 6,
    GameInputForceFeedbackSpring = 7,
    GameInputForceFeedbackFriction = 8,
    GameInputForceFeedbackDamper = 9,
    GameInputForceFeedbackInertia = 10);
  PGameInputForceFeedbackEffectKind = ^GameInputForceFeedbackEffectKind;

  GameInputRumbleMotors = (
    GameInputRumbleNone = 0,
    GameInputRumbleLowFrequency = 1,
    GameInputRumbleHighFrequency = 2,
    GameInputRumbleLeftTrigger = 4,
    GameInputRumbleRightTrigger = 8);
  PGameInputRumbleMotors = ^GameInputRumbleMotors;
  GameInputCallbackToken = UInt64;
  PGameInputCallbackToken = ^GameInputCallbackToken;

  GameInputReadingCallback = procedure(callbackToken: GameInputCallbackToken; context: Pointer; reading: PIGameInputReading; hasOverrunOccurred: UTF8Char); stdcall;

  GameInputDeviceCallback = procedure(callbackToken: GameInputCallbackToken; context: Pointer; device: PIGameInputDevice; timestamp: UInt64; currentStatus: GameInputDeviceStatus; previousStatus: GameInputDeviceStatus); stdcall;

  GameInputGuideButtonCallback = procedure(callbackToken: GameInputCallbackToken; context: Pointer; device: PIGameInputDevice; timestamp: UInt64; isPressed: UTF8Char); stdcall;

  GameInputKeyboardLayoutCallback = procedure(callbackToken: GameInputCallbackToken; context: Pointer; device: PIGameInputDevice; timestamp: UInt64; currentLayout: UInt32; previousLayout: UInt32); stdcall;

  GameInputKeyState = record
    scanCode: UInt32;
    codePoint: UInt32;
    virtualKey: UInt8;
    isDeadKey: UTF8Char;
  end;

  GameInputMouseState = record
    buttons: GameInputMouseButtons;
    positionX: Int64;
    positionY: Int64;
    wheelX: Int64;
    wheelY: Int64;
  end;

  GameInputTouchState = record
    touchId: UInt64;
    sensorIndex: UInt32;
    positionX: Single;
    positionY: Single;
    pressure: Single;
    proximity: Single;
    contactRectTop: Single;
    contactRectLeft: Single;
    contactRectRight: Single;
    contactRectBottom: Single;
  end;

  GameInputMotionState = record
    accelerationX: Single;
    accelerationY: Single;
    accelerationZ: Single;
    angularVelocityX: Single;
    angularVelocityY: Single;
    angularVelocityZ: Single;
    magneticFieldX: Single;
    magneticFieldY: Single;
    magneticFieldZ: Single;
    orientationW: Single;
    orientationX: Single;
    orientationY: Single;
    orientationZ: Single;
    accelerometerAccuracy: GameInputMotionAccuracy;
    gyroscopeAccuracy: GameInputMotionAccuracy;
    magnetometerAccuracy: GameInputMotionAccuracy;
    orientationAccuracy: GameInputMotionAccuracy;
  end;

  GameInputArcadeStickState = record
    buttons: GameInputArcadeStickButtons;
  end;

  GameInputFlightStickState = record
    buttons: GameInputFlightStickButtons;
    hatSwitch: GameInputSwitchPosition;
    roll: Single;
    pitch: Single;
    yaw: Single;
    throttle: Single;
  end;

  GameInputGamepadState = record
    buttons: GameInputGamepadButtons;
    leftTrigger: Single;
    rightTrigger: Single;
    leftThumbstickX: Single;
    leftThumbstickY: Single;
    rightThumbstickX: Single;
    rightThumbstickY: Single;
  end;

  GameInputRacingWheelState = record
    buttons: GameInputRacingWheelButtons;
    patternShifterGear: Int32;
    wheel: Single;
    throttle: Single;
    brake: Single;
    clutch: Single;
    handbrake: Single;
  end;

  GameInputUiNavigationState = record
    buttons: GameInputUiNavigationButtons;
  end;

  GameInputBatteryState = record
    chargeRate: Single;
    maxChargeRate: Single;
    remainingCapacity: Single;
    fullChargeCapacity: Single;
    status: GameInputBatteryStatus;
  end;

  GameInputString = record
    sizeInBytes: UInt32;
    codePointCount: UInt32;
    data: PUTF8Char;
  end;

  GameInputUsage = record
    page: UInt16;
    id: UInt16;
  end;

  GameInputVersion = record
    major: UInt16;
    minor: UInt16;
    build: UInt16;
    revision: UInt16;
  end;

  GameInputRawDeviceItemCollectionInfo = record
    kind: GameInputRawDeviceItemCollectionKind;
    childCount: UInt32;
    siblingCount: UInt32;
    usageCount: UInt32;
    usages: PGameInputUsage;
    parent: PGameInputRawDeviceItemCollectionInfo;
    firstSibling: PGameInputRawDeviceItemCollectionInfo;
    previousSibling: PGameInputRawDeviceItemCollectionInfo;
    nextSibling: PGameInputRawDeviceItemCollectionInfo;
    lastSibling: PGameInputRawDeviceItemCollectionInfo;
    firstChild: PGameInputRawDeviceItemCollectionInfo;
    lastChild: PGameInputRawDeviceItemCollectionInfo;
  end;

  GameInputRawDeviceReportItemInfo = record
    bitOffset: UInt32;
    bitSize: UInt32;
    logicalMin: Int64;
    logicalMax: Int64;
    physicalMin: Double;
    physicalMax: Double;
    physicalUnits: GameInputRawDevicePhysicalUnitKind;
    rawPhysicalUnits: UInt32;
    rawPhysicalUnitsExponent: Int32;
    flags: GameInputRawDeviceReportItemFlags;
    usageCount: UInt32;
    usages: PGameInputUsage;
    collection: PGameInputRawDeviceItemCollectionInfo;
    itemString: PGameInputString;
  end;

  GameInputRawDeviceReportInfo = record
    kind: GameInputRawDeviceReportKind;
    id: UInt32;
    size: UInt32;
    itemCount: UInt32;
    items: PGameInputRawDeviceReportItemInfo;
  end;

  GameInputControllerAxisInfo = record
    mappedInputKinds: GameInputKind;
    &label: GameInputLabel;
    isContinuous: Boolean;
    isNonlinear: Boolean;
    isQuantized: Boolean;
    hasRestValue: Boolean;
    restValue: Single;
    resolution: UInt64;
    legacyDInputIndex: UInt16;
    legacyHidIndex: UInt16;
    rawReportIndex: UInt32;
    inputReport: PGameInputRawDeviceReportInfo;
    inputReportItem: PGameInputRawDeviceReportItemInfo;
  end;

  GameInputControllerButtonInfo = record
    mappedInputKinds: GameInputKind;
    &label: GameInputLabel;
    legacyDInputIndex: UInt16;
    legacyHidIndex: UInt16;
    rawReportIndex: UInt32;
    inputReport: PGameInputRawDeviceReportInfo;
    inputReportItem: PGameInputRawDeviceReportItemInfo;
  end;

  GameInputControllerSwitchInfo = record
    mappedInputKinds: GameInputKind;
    &label: GameInputLabel;
    positionLabels: array [0..8] of GameInputLabel;
    kind: GameInputSwitchKind;
    legacyDInputIndex: UInt16;
    legacyHidIndex: UInt16;
    rawReportIndex: UInt32;
    inputReport: PGameInputRawDeviceReportInfo;
    inputReportItem: PGameInputRawDeviceReportItemInfo;
  end;

  GameInputKeyboardInfo = record
    kind: GameInputKeyboardKind;
    layout: UInt32;
    keyCount: UInt32;
    functionKeyCount: UInt32;
    maxSimultaneousKeys: UInt32;
    platformType: UInt32;
    platformSubtype: UInt32;
    nativeLanguage: PGameInputString;
  end;

  GameInputMouseInfo = record
    supportedButtons: GameInputMouseButtons;
    sampleRate: UInt32;
    sensorDpi: UInt32;
    hasWheelX: Boolean;
    hasWheelY: Boolean;
  end;

  GameInputTouchSensorInfo = record
    mappedInputKinds: GameInputKind;
    &label: GameInputLabel;
    location: GameInputLocation;
    locationId: UInt32;
    resolutionX: UInt64;
    resolutionY: UInt64;
    shape: GameInputTouchShape;
    aspectRatio: Single;
    orientation: Single;
    physicalWidth: Single;
    physicalHeight: Single;
    maxPressure: Single;
    maxProximity: Single;
    maxTouchPoints: UInt32;
  end;

  GameInputMotionInfo = record
    maxAcceleration: Single;
    maxAngularVelocity: Single;
    maxMagneticFieldStrength: Single;
  end;

  GameInputArcadeStickInfo = record
    menuButtonLabel: GameInputLabel;
    viewButtonLabel: GameInputLabel;
    stickUpLabel: GameInputLabel;
    stickDownLabel: GameInputLabel;
    stickLeftLabel: GameInputLabel;
    stickRightLabel: GameInputLabel;
    actionButton1Label: GameInputLabel;
    actionButton2Label: GameInputLabel;
    actionButton3Label: GameInputLabel;
    actionButton4Label: GameInputLabel;
    actionButton5Label: GameInputLabel;
    actionButton6Label: GameInputLabel;
    specialButton1Label: GameInputLabel;
    specialButton2Label: GameInputLabel;
  end;

  GameInputFlightStickInfo = record
    menuButtonLabel: GameInputLabel;
    viewButtonLabel: GameInputLabel;
    firePrimaryButtonLabel: GameInputLabel;
    fireSecondaryButtonLabel: GameInputLabel;
    hatSwitchKind: GameInputSwitchKind;
  end;

  GameInputGamepadInfo = record
    menuButtonLabel: GameInputLabel;
    viewButtonLabel: GameInputLabel;
    aButtonLabel: GameInputLabel;
    bButtonLabel: GameInputLabel;
    xButtonLabel: GameInputLabel;
    yButtonLabel: GameInputLabel;
    dpadUpLabel: GameInputLabel;
    dpadDownLabel: GameInputLabel;
    dpadLeftLabel: GameInputLabel;
    dpadRightLabel: GameInputLabel;
    leftShoulderButtonLabel: GameInputLabel;
    rightShoulderButtonLabel: GameInputLabel;
    leftThumbstickButtonLabel: GameInputLabel;
    rightThumbstickButtonLabel: GameInputLabel;
  end;

  GameInputRacingWheelInfo = record
    menuButtonLabel: GameInputLabel;
    viewButtonLabel: GameInputLabel;
    previousGearButtonLabel: GameInputLabel;
    nextGearButtonLabel: GameInputLabel;
    dpadUpLabel: GameInputLabel;
    dpadDownLabel: GameInputLabel;
    dpadLeftLabel: GameInputLabel;
    dpadRightLabel: GameInputLabel;
    hasClutch: Boolean;
    hasHandbrake: Boolean;
    hasPatternShifter: Boolean;
    minPatternShifterGear: Int32;
    maxPatternShifterGear: Int32;
    maxWheelAngle: Single;
  end;

  GameInputUiNavigationInfo = record
    menuButtonLabel: GameInputLabel;
    viewButtonLabel: GameInputLabel;
    acceptButtonLabel: GameInputLabel;
    cancelButtonLabel: GameInputLabel;
    upButtonLabel: GameInputLabel;
    downButtonLabel: GameInputLabel;
    leftButtonLabel: GameInputLabel;
    rightButtonLabel: GameInputLabel;
    contextButton1Label: GameInputLabel;
    contextButton2Label: GameInputLabel;
    contextButton3Label: GameInputLabel;
    contextButton4Label: GameInputLabel;
    pageUpButtonLabel: GameInputLabel;
    pageDownButtonLabel: GameInputLabel;
    pageLeftButtonLabel: GameInputLabel;
    pageRightButtonLabel: GameInputLabel;
    scrollUpButtonLabel: GameInputLabel;
    scrollDownButtonLabel: GameInputLabel;
    scrollLeftButtonLabel: GameInputLabel;
    scrollRightButtonLabel: GameInputLabel;
    guideButtonLabel: GameInputLabel;
  end;

  GameInputForceFeedbackMotorInfo = record
    supportedAxes: GameInputFeedbackAxes;
    location: GameInputLocation;
    locationId: UInt32;
    maxSimultaneousEffects: UInt32;
    isConstantEffectSupported: Boolean;
    isRampEffectSupported: Boolean;
    isSineWaveEffectSupported: Boolean;
    isSquareWaveEffectSupported: Boolean;
    isTriangleWaveEffectSupported: Boolean;
    isSawtoothUpWaveEffectSupported: Boolean;
    isSawtoothDownWaveEffectSupported: Boolean;
    isSpringEffectSupported: Boolean;
    isFrictionEffectSupported: Boolean;
    isDamperEffectSupported: Boolean;
    isInertiaEffectSupported: Boolean;
  end;

  GameInputHapticWaveformInfo = record
    usage: GameInputUsage;
    isDurationSupported: Boolean;
    isIntensitySupported: Boolean;
    isRepeatSupported: Boolean;
    isRepeatDelaySupported: Boolean;
    defaultDuration: UInt64;
  end;

  GameInputHapticFeedbackMotorInfo = record
    mappedRumbleMotors: GameInputRumbleMotors;
    location: GameInputLocation;
    locationId: UInt32;
    waveformCount: UInt32;
    waveformInfo: PGameInputHapticWaveformInfo;
  end;

  GameInputDeviceInfo = record
    infoSize: UInt32;
    vendorId: UInt16;
    productId: UInt16;
    revisionNumber: UInt16;
    interfaceNumber: UInt8;
    collectionNumber: UInt8;
    usage: GameInputUsage;
    hardwareVersion: GameInputVersion;
    firmwareVersion: GameInputVersion;
    deviceId: APP_LOCAL_DEVICE_ID;
    deviceRootId: APP_LOCAL_DEVICE_ID;
    deviceFamily: GameInputDeviceFamily;
    capabilities: GameInputDeviceCapabilities;
    supportedInput: GameInputKind;
    supportedRumbleMotors: GameInputRumbleMotors;
    inputReportCount: UInt32;
    outputReportCount: UInt32;
    featureReportCount: UInt32;
    controllerAxisCount: UInt32;
    controllerButtonCount: UInt32;
    controllerSwitchCount: UInt32;
    touchPointCount: UInt32;
    touchSensorCount: UInt32;
    forceFeedbackMotorCount: UInt32;
    hapticFeedbackMotorCount: UInt32;
    deviceStringCount: UInt32;
    deviceDescriptorSize: UInt32;
    inputReportInfo: PGameInputRawDeviceReportInfo;
    outputReportInfo: PGameInputRawDeviceReportInfo;
    featureReportInfo: PGameInputRawDeviceReportInfo;
    controllerAxisInfo: PGameInputControllerAxisInfo;
    controllerButtonInfo: PGameInputControllerButtonInfo;
    controllerSwitchInfo: PGameInputControllerSwitchInfo;
    keyboardInfo: PGameInputKeyboardInfo;
    mouseInfo: PGameInputMouseInfo;
    touchSensorInfo: PGameInputTouchSensorInfo;
    motionInfo: PGameInputMotionInfo;
    arcadeStickInfo: PGameInputArcadeStickInfo;
    flightStickInfo: PGameInputFlightStickInfo;
    gamepadInfo: PGameInputGamepadInfo;
    racingWheelInfo: PGameInputRacingWheelInfo;
    uiNavigationInfo: PGameInputUiNavigationInfo;
    forceFeedbackMotorInfo: PGameInputForceFeedbackMotorInfo;
    hapticFeedbackMotorInfo: PGameInputHapticFeedbackMotorInfo;
    displayName: PGameInputString;
    deviceStrings: PGameInputString;
    deviceDescriptorData: Pointer;
  end;

  GameInputForceFeedbackEnvelope = record
    attackDuration: UInt64;
    sustainDuration: UInt64;
    releaseDuration: UInt64;
    attackGain: Single;
    sustainGain: Single;
    releaseGain: Single;
    playCount: UInt32;
    repeatDelay: UInt64;
  end;

  GameInputForceFeedbackMagnitude = record
    linearX: Single;
    linearY: Single;
    linearZ: Single;
    angularX: Single;
    angularY: Single;
    angularZ: Single;
    normal: Single;
  end;

  GameInputForceFeedbackConditionParams = record
    magnitude: GameInputForceFeedbackMagnitude;
    positiveCoefficient: Single;
    negativeCoefficient: Single;
    maxPositiveMagnitude: Single;
    maxNegativeMagnitude: Single;
    deadZone: Single;
    bias: Single;
  end;

  GameInputForceFeedbackConstantParams = record
    envelope: GameInputForceFeedbackEnvelope;
    magnitude: GameInputForceFeedbackMagnitude;
  end;

  GameInputForceFeedbackPeriodicParams = record
    envelope: GameInputForceFeedbackEnvelope;
    magnitude: GameInputForceFeedbackMagnitude;
    frequency: Single;
    phase: Single;
    bias: Single;
  end;

  GameInputForceFeedbackRampParams = record
    envelope: GameInputForceFeedbackEnvelope;
    startMagnitude: GameInputForceFeedbackMagnitude;
    endMagnitude: GameInputForceFeedbackMagnitude;
  end;

  P_anonymous_type_1 = ^_anonymous_type_1;
  _anonymous_type_1 = record
    case Integer of
      0: (constant: GameInputForceFeedbackConstantParams);
      1: (ramp: GameInputForceFeedbackRampParams);
      2: (sineWave: GameInputForceFeedbackPeriodicParams);
      3: (squareWave: GameInputForceFeedbackPeriodicParams);
      4: (triangleWave: GameInputForceFeedbackPeriodicParams);
      5: (sawtoothUpWave: GameInputForceFeedbackPeriodicParams);
      6: (sawtoothDownWave: GameInputForceFeedbackPeriodicParams);
      7: (spring: GameInputForceFeedbackConditionParams);
      8: (friction: GameInputForceFeedbackConditionParams);
      9: (damper: GameInputForceFeedbackConditionParams);
      10: (inertia: GameInputForceFeedbackConditionParams);
  end;

  GameInputForceFeedbackParams = record
    kind: GameInputForceFeedbackEffectKind;
    data: _anonymous_type_1;
  end;

  GameInputHapticFeedbackParams = record
    waveformIndex: UInt32;
    duration: UInt64;
    intensity: Single;
    playCount: UInt32;
    repeatDelay: UInt64;
  end;

  GameInputRumbleParams = record
    lowFrequency: Single;
    highFrequency: Single;
    leftTrigger: Single;
    rightTrigger: Single;
  end;

  IGameInput = record
    lpVtbl: PIGameInputVtbl;
  end;

  IGameInputVtbl = record
    QueryInterface: function(This: PIGameInput; const riid: PIID; ppvObj: PPointer): HRESULT; stdcall;
    AddRef: function(This: PIGameInput): ULONG; stdcall;
    Release: function(This: PIGameInput): ULONG; stdcall;
    GetCurrentTimestamp: function(This: PIGameInput): UInt64; stdcall;
    GetCurrentReading: function(This: PIGameInput; inputKind: GameInputKind; device: PIGameInputDevice; reading: PPIGameInputReading): HRESULT; stdcall;
    GetNextReading: function(This: PIGameInput; referenceReading: PIGameInputReading; inputKind: GameInputKind; device: PIGameInputDevice; reading: PPIGameInputReading): HRESULT; stdcall;
    GetPreviousReading: function(This: PIGameInput; referenceReading: PIGameInputReading; inputKind: GameInputKind; device: PIGameInputDevice; reading: PPIGameInputReading): HRESULT; stdcall;
    GetTemporalReading: function(This: PIGameInput; timestamp: UInt64; device: PIGameInputDevice; reading: PPIGameInputReading): HRESULT; stdcall;
    RegisterReadingCallback: function(This: PIGameInput; device: PIGameInputDevice; inputKind: GameInputKind; analogThreshold: Single; context: Pointer; callbackFunc: GameInputReadingCallback; callbackToken: PGameInputCallbackToken): HRESULT; stdcall;
    RegisterDeviceCallback: function(This: PIGameInput; device: PIGameInputDevice; inputKind: GameInputKind; statusFilter: GameInputDeviceStatus; enumerationKind: GameInputEnumerationKind; context: Pointer; callbackFunc: GameInputDeviceCallback; callbackToken: PGameInputCallbackToken): HRESULT; stdcall;
    RegisterGuideButtonCallback: function(This: PIGameInput; device: PIGameInputDevice; context: Pointer; callbackFunc: GameInputGuideButtonCallback; callbackToken: PGameInputCallbackToken): HRESULT; stdcall;
    RegisterKeyboardLayoutCallback: function(This: PIGameInput; device: PIGameInputDevice; context: Pointer; callbackFunc: GameInputKeyboardLayoutCallback; callbackToken: PGameInputCallbackToken): HRESULT; stdcall;
    StopCallback: procedure(This: PIGameInput; callbackToken: GameInputCallbackToken); stdcall;
    UnregisterCallback: function(This: PIGameInput; callbackToken: GameInputCallbackToken; timeoutInMicroseconds: UInt64): Boolean; stdcall;
    CreateDispatcher: function(This: PIGameInput; dispatcher: PPIGameInputDispatcher): HRESULT; stdcall;
    CreateAggregateDevice: function(This: PIGameInput; inputKind: GameInputKind; device: PPIGameInputDevice): HRESULT; stdcall;
    FindDeviceFromId: function(This: PIGameInput; const value: PAPP_LOCAL_DEVICE_ID; device: PPIGameInputDevice): HRESULT; stdcall;
    FindDeviceFromObject: function(This: PIGameInput; value: PIUnknown; device: PPIGameInputDevice): HRESULT; stdcall;
    FindDeviceFromPlatformHandle: function(This: PIGameInput; value: HANDLE; device: PPIGameInputDevice): HRESULT; stdcall;
    FindDeviceFromPlatformString: function(This: PIGameInput; value: LPCWSTR; device: PPIGameInputDevice): HRESULT; stdcall;
    EnableOemDeviceSupport: function(This: PIGameInput; vendorId: UInt16; productId: UInt16; interfaceNumber: UInt8; collectionNumber: UInt8): HRESULT; stdcall;
    SetFocusPolicy: procedure(This: PIGameInput; policy: GameInputFocusPolicy); stdcall;
  end;

  IGameInputReading = record
    lpVtbl: PIGameInputReadingVtbl;
  end;

  IGameInputReadingVtbl = record
    QueryInterface: function(This: PIGameInputReading; const riid: PIID; ppvObj: PPointer): HRESULT; stdcall;
    AddRef: function(This: PIGameInputReading): ULONG; stdcall;
    Release: function(This: PIGameInputReading): ULONG; stdcall;
    GetInputKind: function(This: PIGameInputReading): GameInputKind; stdcall;
    GetSequenceNumber: function(This: PIGameInputReading; inputKind: GameInputKind): UInt64; stdcall;
    GetTimestamp: function(This: PIGameInputReading): UInt64; stdcall;
    GetDevice: procedure(This: PIGameInputReading; device: PPIGameInputDevice); stdcall;
    GetRawReport: function(This: PIGameInputReading; report: PPIGameInputRawDeviceReport): Boolean; stdcall;
    GetControllerAxisCount: function(This: PIGameInputReading): UInt32; stdcall;
    GetControllerAxisState: function(This: PIGameInputReading; stateArrayCount: UInt32; stateArray: PSingle): UInt32; stdcall;
    GetControllerButtonCount: function(This: PIGameInputReading): UInt32; stdcall;
    GetControllerButtonState: function(This: PIGameInputReading; stateArrayCount: UInt32; stateArray: PUTF8Char): UInt32; stdcall;
    GetControllerSwitchCount: function(This: PIGameInputReading): UInt32; stdcall;
    GetControllerSwitchState: function(This: PIGameInputReading; stateArrayCount: UInt32; stateArray: PGameInputSwitchPosition): UInt32; stdcall;
    GetKeyCount: function(This: PIGameInputReading): UInt32; stdcall;
    GetKeyState: function(This: PIGameInputReading; stateArrayCount: UInt32; stateArray: PGameInputKeyState): UInt32; stdcall;
    GetMouseState: function(This: PIGameInputReading; state: PGameInputMouseState): Boolean; stdcall;
    GetTouchCount: function(This: PIGameInputReading): UInt32; stdcall;
    GetTouchState: function(This: PIGameInputReading; stateArrayCount: UInt32; stateArray: PGameInputTouchState): UInt32; stdcall;
    GetMotionState: function(This: PIGameInputReading; state: PGameInputMotionState): Boolean; stdcall;
    GetArcadeStickState: function(This: PIGameInputReading; state: PGameInputArcadeStickState): Boolean; stdcall;
    GetFlightStickState: function(This: PIGameInputReading; state: PGameInputFlightStickState): Boolean; stdcall;
    GetGamepadState: function(This: PIGameInputReading; state: PGameInputGamepadState): Boolean; stdcall;
    GetRacingWheelState: function(This: PIGameInputReading; state: PGameInputRacingWheelState): Boolean; stdcall;
    GetUiNavigationState: function(This: PIGameInputReading; state: PGameInputUiNavigationState): Boolean; stdcall;
  end;

  IGameInputDevice = record
    lpVtbl: PIGameInputDeviceVtbl;
  end;

  IGameInputDeviceVtbl = record
    QueryInterface: function(This: PIGameInputDevice; const riid: PIID; ppvObj: PPointer): HRESULT; stdcall;
    AddRef: function(This: PIGameInputDevice): ULONG; stdcall;
    Release: function(This: PIGameInputDevice): ULONG; stdcall;
    GetDeviceInfo: function(This: PIGameInputDevice): PGameInputDeviceInfo; stdcall;
    GetDeviceStatus: function(This: PIGameInputDevice): GameInputDeviceStatus; stdcall;
    GetBatteryState: procedure(This: PIGameInputDevice; state: PGameInputBatteryState); stdcall;
    CreateForceFeedbackEffect: function(This: PIGameInputDevice; motorIndex: UInt32; const params: PGameInputForceFeedbackParams; effect: PPIGameInputForceFeedbackEffect): HRESULT; stdcall;
    IsForceFeedbackMotorPoweredOn: function(This: PIGameInputDevice; motorIndex: UInt32): Boolean; stdcall;
    SetForceFeedbackMotorGain: procedure(This: PIGameInputDevice; motorIndex: UInt32; masterGain: Single); stdcall;
    SetHapticMotorState: function(This: PIGameInputDevice; motorIndex: UInt32; const params: PGameInputHapticFeedbackParams): HRESULT; stdcall;
    SetRumbleState: procedure(This: PIGameInputDevice; const params: PGameInputRumbleParams); stdcall;
    SetInputSynchronizationState: procedure(This: PIGameInputDevice; enabled: Boolean); stdcall;
    SendInputSynchronizationHint: procedure(This: PIGameInputDevice); stdcall;
    PowerOff: procedure(This: PIGameInputDevice); stdcall;
    CreateRawDeviceReport: function(This: PIGameInputDevice; reportId: UInt32; reportKind: GameInputRawDeviceReportKind; report: PPIGameInputRawDeviceReport): HRESULT; stdcall;
    GetRawDeviceFeature: function(This: PIGameInputDevice; reportId: UInt32; report: PPIGameInputRawDeviceReport): HRESULT; stdcall;
    SetRawDeviceFeature: function(This: PIGameInputDevice; report: PIGameInputRawDeviceReport): HRESULT; stdcall;
    SendRawDeviceOutput: function(This: PIGameInputDevice; report: PIGameInputRawDeviceReport): HRESULT; stdcall;
    SendRawDeviceOutputWithResponse: function(This: PIGameInputDevice; requestReport: PIGameInputRawDeviceReport; responseReport: PPIGameInputRawDeviceReport): HRESULT; stdcall;
    ExecuteRawDeviceIoControl: function(This: PIGameInputDevice; controlCode: UInt32; inputBufferSize: NativeUInt; const inputBuffer: Pointer; outputBufferSize: NativeUInt; outputBuffer: Pointer; outputSize: PNativeUInt): HRESULT; stdcall;
    AcquireExclusiveRawDeviceAccess: function(This: PIGameInputDevice; timeoutInMicroseconds: UInt64): Boolean; stdcall;
    ReleaseExclusiveRawDeviceAccess: procedure(This: PIGameInputDevice); stdcall;
  end;

  IGameInputDispatcher = record
    lpVtbl: PIGameInputDispatcherVtbl;
  end;

  IGameInputDispatcherVtbl = record
    QueryInterface: function(This: PIGameInputDispatcher; const riid: PIID; ppvObj: PPointer): HRESULT; stdcall;
    AddRef: function(This: PIGameInputDispatcher): ULONG; stdcall;
    Release: function(This: PIGameInputDispatcher): ULONG; stdcall;
    Dispatch: function(This: PIGameInputDispatcher; quotaInMicroseconds: UInt64): Boolean; stdcall;
    OpenWaitHandle: function(This: PIGameInputDispatcher; waitHandle: PHANDLE): HRESULT; stdcall;
  end;

  IGameInputForceFeedbackEffect = record
    lpVtbl: PIGameInputForceFeedbackEffectVtbl;
  end;

  IGameInputForceFeedbackEffectVtbl = record
    QueryInterface: function(This: PIGameInputForceFeedbackEffect; const riid: PIID; ppvObj: PPointer): HRESULT; stdcall;
    AddRef: function(This: PIGameInputForceFeedbackEffect): ULONG; stdcall;
    Release: function(This: PIGameInputForceFeedbackEffect): ULONG; stdcall;
    GetDevice: procedure(This: PIGameInputForceFeedbackEffect; device: PPIGameInputDevice); stdcall;
    GetMotorIndex: function(This: PIGameInputForceFeedbackEffect): UInt32; stdcall;
    GetGain: function(This: PIGameInputForceFeedbackEffect): Single; stdcall;
    SetGain: procedure(This: PIGameInputForceFeedbackEffect; gain: Single); stdcall;
    GetParams: procedure(This: PIGameInputForceFeedbackEffect; params: PGameInputForceFeedbackParams); stdcall;
    SetParams: function(This: PIGameInputForceFeedbackEffect; const params: PGameInputForceFeedbackParams): Boolean; stdcall;
    GetState: function(This: PIGameInputForceFeedbackEffect): GameInputFeedbackEffectState; stdcall;
    SetState: procedure(This: PIGameInputForceFeedbackEffect; state: GameInputFeedbackEffectState); stdcall;
  end;

  IGameInputRawDeviceReport = record
    lpVtbl: PIGameInputRawDeviceReportVtbl;
  end;

  IGameInputRawDeviceReportVtbl = record
    QueryInterface: function(This: PIGameInputRawDeviceReport; const riid: PIID; ppvObj: PPointer): HRESULT; stdcall;
    AddRef: function(This: PIGameInputRawDeviceReport): ULONG; stdcall;
    Release: function(This: PIGameInputRawDeviceReport): ULONG; stdcall;
    GetDevice: procedure(This: PIGameInputRawDeviceReport; device: PPIGameInputDevice); stdcall;
    GetReportInfo: function(This: PIGameInputRawDeviceReport): PGameInputRawDeviceReportInfo; stdcall;
    GetRawDataSize: function(This: PIGameInputRawDeviceReport): NativeUInt; stdcall;
    GetRawData: function(This: PIGameInputRawDeviceReport; bufferSize: NativeUInt; buffer: Pointer): NativeUInt; stdcall;
    SetRawData: function(This: PIGameInputRawDeviceReport; bufferSize: NativeUInt; const buffer: Pointer): Boolean; stdcall;
    GetItemValue: function(This: PIGameInputRawDeviceReport; itemIndex: UInt32; value: PInt64): Boolean; stdcall;
    SetItemValue: function(This: PIGameInputRawDeviceReport; itemIndex: UInt32; value: Int64): Boolean; stdcall;
    ResetItemValue: function(This: PIGameInputRawDeviceReport; itemIndex: UInt32): Boolean; stdcall;
    ResetAllItems: function(This: PIGameInputRawDeviceReport): Boolean; stdcall;
  end;

function GameInputCreate(gameInput: PPIGameInput): HRESULT; stdcall;
  external LIB_GAMEINPUT name _PU + 'GameInputCreate';

implementation

end.
